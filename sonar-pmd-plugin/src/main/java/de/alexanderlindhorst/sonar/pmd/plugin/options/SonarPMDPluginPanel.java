/*
 * Copyright (C) 2013 alindhorst.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package de.alexanderlindhorst.sonar.pmd.plugin.options;

import java.net.MalformedURLException;
import java.net.URL;

import org.openide.util.Exceptions;

import de.alexanderlindhorst.sonar.pmd.plugin.options.gui.SonarPMDPluginConfigPane;
import de.alexanderlindhorst.sonar.pmd.plugin.util.SonarPMDPluginUtils;

import net.sourceforge.pmd.SourceType;

final class SonarPMDPluginPanel extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;

    private final SonarPMDOptionsPanelController controller;

    SonarPMDPluginPanel(SonarPMDOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        configPane = new de.alexanderlindhorst.sonar.pmd.plugin.options.gui.SonarPMDPluginConfigPane();

        setLayout(new java.awt.BorderLayout());
        add(configPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        URL loadConfigUrl = SonarPMDPluginUtils.loadConfigUrl();
        SourceType sourceType = SonarPMDPluginUtils.loadConfigSourceType();
        configPane.setConfigUrl(loadConfigUrl);
        configPane.setSourceType(sourceType);
    }

    void store() {
        try {
            URL configUrl = configPane.getConfigUrl();
            SourceType sourceType = configPane.getSourceType();
            SonarPMDPluginUtils.storeConfig(configUrl, sourceType);
        } catch (MalformedURLException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    SonarPMDPluginConfigPane getConfigPane() {
        return configPane;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.alexanderlindhorst.sonar.pmd.plugin.options.gui.SonarPMDPluginConfigPane configPane;
    // End of variables declaration//GEN-END:variables
}
